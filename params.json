{"name":"Github development flow","tagline":"github, git, development","body":"## Github development flow\r\n\r\nHere is development flow i am working with 12 people team through github.\r\n\r\nThere are 2 main branches in github: __master__ and __dev__ .\r\n\r\n__master__ is stable branch ready for release any moment.\r\n__dev__ is branch team working on for next update.\r\n\r\nSo in the beginning __master__ and __dev__ branches are same.\r\n\r\n1) If developer wants to start new feature / fix, he should switch to __dev__ branch and get latest version:\r\n\r\n```\r\ngit checkout dev\r\ngit pull origin dev\r\n```\r\n\r\n2) Ok, we want to start login page bugfix. Issue number in github is #1234.\r\nThis case we should create new branch from __dev__ branch.\r\n\r\n```\r\ngit checkout -b 1234-bug-login\r\n```\r\n\r\n`bug-login` is only example. First word should be `bug` or `feature`. Branch has been created locally.\r\n\r\n3) Then developer will work with code locally, make changes, commits etc. Commits messages should contain issue number and technical description:\r\n\r\n```\r\ngit add ...list of files...\r\ngit commit -m \"#1234 changing backbone model url\"\r\n```\r\n\r\n4) Development finished, we need to push changes to github.\r\n\r\n```\r\ngit push origin 1234-bug-login\r\n```\r\n\r\nOk, changes are in repository, now developer should merge (rebase) his changes with development changes to be able merge to __dev__ branch without conflicts.\r\n\r\nAt first we should get latest copy of dev branch\r\n\r\n```\r\ngit checkout dev\r\ngit pull origin dev\r\n```\r\n\r\nAnd then make rebase\r\n\r\n```\r\ngit checkout 1234-bug-login\r\ngit rebase dev\r\ngit push -f origin 1234-bug-login\r\n```\r\n\r\n5) Great! Now changes are in repository and developer should __Create pull request__ from __1234-bug-login__ to __dev__ branch in github.\r\n\r\n6) Pull request done, anyone (~same level) can review it, write comments etc. Comments should be fixed and pushed to `1234-bug-login` branch. Pull request will be updated automatically.\r\n\r\n7) Sometimes other branches have been merge to __dev__ and `1234-bug-login` branch is out of date. This case developer just make rebase again and push again.\r\n\r\n8) Perfect! If all fixes were done and someone wrote `merge it` in pull request, developer uses __Merge pull request__ button to merge branch into __dev__ .\r\n\r\n### Testing\r\n\r\n9) Once `1234-bug-login` in __dev__ branch, Jenkins automatically deploying latest __dev__ branch to __dev server__ for testing. QA will verify or reopen issue.\r\n\r\n10) If pull request is big, developer / lead can deploy `1234-bug-login` branch to __QA server__ before merging pull request.\r\n\r\n### Releasing\r\n\r\n11) Before release __dev__ is merging to __master__ branch and deploying to __QA server__. Testers should make regression testing.\r\n\r\n12) If tests passed, deployment to production can be done, otherwise developers should make fixes directly to __master__ branch.\r\n\r\n13) Ok, QA found few bugs which were fixed in __master__. Next step (after release) is merge hofixes from __master__ to __dev__\r\n\r\n```\r\ngit checkout master\r\ngit pull origin master\r\n\r\ngit checkout dev\r\ngit pull origin dev\r\n\r\ngit merge master\r\n\r\ngit push origin dev\r\n```\r\n\r\nThat's all. It can sound too complex but it fits well for any team.","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}